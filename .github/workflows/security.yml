name: Security Monitoring
on:
  # Scheduled scans
  schedule:
    # Daily security scan at 6 AM UTC
    - cron: '0 6 * * *'
    # Weekly deep scan on Sundays at 3 AM UTC  
    - cron: '0 3 * * 0'
  
  # PR-triggered scans for dependency changes
  pull_request:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'requirements.txt'
      - 'pyproject.toml'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'daily'
        type: choice
        options:
        - daily
        - deep
        - pr-check

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    outputs:
      python-issues: ${{ steps.security.outputs.python-issues }}
      js-issues: ${{ steps.security.outputs.js-issues }}
      bandit-issues: ${{ steps.security.outputs.bandit-issues }}
      scan-context: ${{ steps.context.outputs.scan-context }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup environment
      uses: ./.github/actions/setup

    - name: Determine scan context
      id: context
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "scan-context=pr" >> $GITHUB_OUTPUT
          echo "scan-type=PR dependency check" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "schedule" ]]; then
          if [[ "${{ github.event.schedule }}" == "0 3 * * 0" ]]; then
            echo "scan-context=weekly" >> $GITHUB_OUTPUT
            echo "scan-type=Weekly deep scan" >> $GITHUB_OUTPUT
          else
            echo "scan-context=daily" >> $GITHUB_OUTPUT
            echo "scan-type=Daily security scan" >> $GITHUB_OUTPUT
          fi
        else
          echo "scan-context=manual" >> $GITHUB_OUTPUT
          echo "scan-type=Manual ${{ inputs.scan_type || 'daily' }} scan" >> $GITHUB_OUTPUT
        fi

    - name: Run security scans
      id: security
      uses: ./.github/actions/security
      with:
        upload-artifacts: true

    - name: Comment on PR (if PR context)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const pythonIssues = '${{ steps.security.outputs.python-issues }}' === 'true';
          const jsIssues = '${{ steps.security.outputs.js-issues }}' === 'true';
          const banditIssues = '${{ steps.security.outputs.bandit-issues }}' === 'true';
          
          let comment = '## üîí Security Scan Results\n\n';
          
          if (!pythonIssues && !jsIssues && !banditIssues) {
            comment += '‚úÖ **No security vulnerabilities detected** in dependency changes.\n\n';
          } else {
            comment += '‚ö†Ô∏è **Security issues detected:**\n\n';
            if (pythonIssues) comment += '‚ùå Python dependencies have vulnerabilities\n';
            if (jsIssues) comment += '‚ùå JavaScript dependencies have vulnerabilities\n';
            if (banditIssues) comment += '‚ùå Code security issues found\n';
            comment += '\nüìã Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed results.\n';
          }
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  create-issue-on-failure:
    runs-on: ubuntu-latest
    needs: security-scan
    # Only create issues for scheduled/manual scans, not PRs
    if: |
      github.event_name != 'pull_request' && (
        needs.security-scan.outputs.python-issues == 'true' || 
        needs.security-scan.outputs.js-issues == 'true' || 
        needs.security-scan.outputs.bandit-issues == 'true'
      )
    steps:
    - name: Create security issue
      uses: actions/github-script@v7
      with:
        script: |
          const scanContext = '${{ needs.security-scan.outputs.scan-context }}';
          const pythonIssues = '${{ needs.security-scan.outputs.python-issues }}' === 'true';
          const jsIssues = '${{ needs.security-scan.outputs.js-issues }}' === 'true';
          const banditIssues = '${{ needs.security-scan.outputs.bandit-issues }}' === 'true';
          
          let issueBody = `## üö® Security Vulnerabilities Detected\n\n`;
          issueBody += `**Scan Type:** ${scanContext} scan\n`;
          issueBody += `**Scan Date:** ${new Date().toISOString().split('T')[0]}\n`;
          issueBody += `**Workflow:** [Security Monitoring](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\n`;
          
          issueBody += `### Issues Found:\n`;
          if (pythonIssues) {
            issueBody += `‚ùå **Python Dependencies**: Vulnerabilities found\n`;
          }
          if (jsIssues) {
            issueBody += `‚ùå **JavaScript Dependencies**: Vulnerabilities found\n`;
          }  
          if (banditIssues) {
            issueBody += `‚ùå **Code Security (Bandit)**: Issues found\n`;
          }
          
          issueBody += `\n### Actions Required\n`;
          issueBody += `1. Review security scan artifacts in the workflow run\n`;
          issueBody += `2. Update vulnerable dependencies:\n`;
          issueBody += `   - Python: \`pip-audit --fix\` or manual updates\n`;
          issueBody += `   - JavaScript: \`npm audit fix\`\n`;
          issueBody += `3. Address code security issues identified by Bandit\n`;
          issueBody += `4. Re-run security scans to verify fixes\n`;
          issueBody += `5. Close this issue once resolved\n\n`;
          issueBody += `### Detailed Results\n`;
          issueBody += `Download scan artifacts from the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
          
          // Check if there's already an open security issue
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'security,automated'
          });

          if (existingIssues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Security Vulnerabilities (${scanContext}) - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['security', 'automated', 'vulnerability']
            });
          } else {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssues.data[0].number,
              body: `üîÑ **New security scan results**\n\n${issueBody}`
            });
          }