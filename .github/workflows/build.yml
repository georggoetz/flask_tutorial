name: Build

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "master", "main" ]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flask_tutorial_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -e .[dev]

    - name: Install Node.js dependencies
      run: npm ci

    - name: Run Python tests
      run: |
        source venv/bin/activate
        python -m pytest --cov=flaskr --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flask_tutorial_test

    - name: Run JavaScript tests
      run: npm test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -e .[dev]
        npm ci

    - name: Run Python linting
      run: |
        source venv/bin/activate
        make lint-python

    - name: Run JavaScript linting
      run: make lint-js

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -e .[dev]
        npm ci

    - name: Run security scans
      run: |
        source venv/bin/activate
        make security-python-sarif
        make security-js
        make security-deps-js
        make security-deps-python

    - name: Upload Bandit results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-results.json

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -e .[dev]
        npm ci

    - name: Build frontend assets
      run: make webpack

    - name: Test Docker build
      run: docker build -t flask-tutorial:${{ github.sha }} .